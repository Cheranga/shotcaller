name: restore-build-test

on:
  workflow_call:
    inputs:
      dotnet-version:
        type: string
        required: true
        description: Version of .NET to use (e.g., 8.0.x)
      test-project-names:
        type: string
        required: true
        description: JSON array of project names to test (e.g., '["ProjectA", "ProjectB"]')
    secrets:
      GIST_SECRET:
        required: true
        description: Secret for accessing Gist API to create badges

permissions:
  contents: read

jobs:
  restore_build_test:
    name: Restore, Build, and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project-name: ${{ fromJSON(inputs.test-project-names) }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Restore Dependencies
        run: dotnet restore tests/${{ matrix.project-name }}/${{ matrix.project-name }}.csproj

      - name: Build Project
        run: dotnet build --configuration Release --no-restore tests/${{ matrix.project-name }}/${{ matrix.project-name }}.csproj

      - name: Test with coverage
        run: dotnet test --no-restore --verbosity normal
          --logger "trx;LogFileName=${{ matrix.project-name }}-test-results.trx"
          --collect:"XPlat Code Coverage"
          --results-directory ./coverage/${{ matrix.project-name }}
          tests/${{ matrix.project-name }}/${{ matrix.project-name }}.csproj

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.project-name }}
          path: ./coverage/${{ matrix.project-name }}
  
  coveragereport:
    needs: restore_build_test
    runs-on: ubuntu-latest
    permissions: 
      contents: read
    steps:
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage
          pattern: coverage-*
          merge-multiple: true

      - name: Generate combined coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
        with:
          reports: './coverage/**/coverage.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'HtmlInline;Cobertura;Badges'

      - name: Upload combined coverage report
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport
          path: coveragereport
          
      - name: Get coverage info
        id: coverage
        run: |
          COVERAGE=$(cat coveragereport/badge_linecoverage.txt)
          # Remove the % symbol from the coverage value
          COVERAGE_PCT=${COVERAGE//%/}
          if (( $(echo "$COVERAGE_PCT >= 90" | bc -l) )); then
            COLOR=brightgreen
          elif (( $(echo "$COVERAGE_PCT >= 80" | bc -l) )); then
            COLOR=green
          elif (( $(echo "$COVERAGE_PCT >= 70" | bc -l) )); then
            COLOR=yellowgreen
          elif (( $(echo "$COVERAGE_PCT >= 60" | bc -l) )); then
            COLOR=yellow
          else
            COLOR=red
          fi
          echo "COVERAGE=$COVERAGE_PCT" >> $GITHUB_ENV
          echo "COVERAGE_COLOR=$COLOR" >> $GITHUB_ENV

      - name: Create coverage badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 39e81c066bc22668168352b8484ef7df
          filename: coverage-badge.json
          label: Combined Coverage
          message: ${{ env.COVERAGE }}
          color: ${{ env.COVERAGE_COLOR }}
          
          
          
    